(function() {var implementors = {};
implementors["pravega_client"] = [{"text":"impl !Freeze for ByteStreamWriter","synthetic":true,"types":[]},{"text":"impl !Freeze for ByteStreamReader","synthetic":true,"types":[]},{"text":"impl Freeze for ClientFactory","synthetic":true,"types":[]},{"text":"impl Freeze for RawClientError","synthetic":true,"types":[]},{"text":"impl&lt;__T0&gt; Freeze for AuthTokenExpired&lt;__T0&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;__T0: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for GetConnectionFromPool","synthetic":true,"types":[]},{"text":"impl Freeze for WriteRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ReadReply","synthetic":true,"types":[]},{"text":"impl&lt;__T0, __T1&gt; Freeze for IncompatibleVersion&lt;__T0, __T1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;__T0: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;__T1: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RequestTimeout","synthetic":true,"types":[]},{"text":"impl Freeze for SegmentWriterError","synthetic":true,"types":[]},{"text":"impl Freeze for SendToProcessor","synthetic":true,"types":[]},{"text":"impl&lt;__T0, __T1&gt; Freeze for EventSizeTooLarge&lt;__T0, __T1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;__T0: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;__T1: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ParseToEventCommand","synthetic":true,"types":[]},{"text":"impl Freeze for SegmentWriting","synthetic":true,"types":[]},{"text":"impl&lt;__T0&gt; Freeze for RetryControllerWriting&lt;__T0&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;__T0: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;__T0&gt; Freeze for RetryConnectionPool&lt;__T0&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;__T0: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;__T0&gt; Freeze for RetryRawClient&lt;__T0&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;__T0: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;__T0, __T1&gt; Freeze for WrongReply&lt;__T0, __T1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;__T0: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;__T1: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;__T0&gt; Freeze for WrongHost&lt;__T0&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;__T0: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;__T0&gt; Freeze for ReactorClosed&lt;__T0&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;__T0: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ConditionalCheckFailed","synthetic":true,"types":[]},{"text":"impl Freeze for TransactionalEventStreamWriterError","synthetic":true,"types":[]},{"text":"impl&lt;__T0&gt; Freeze for PingerError&lt;__T0&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;__T0: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TxnStreamControllerError","synthetic":true,"types":[]},{"text":"impl Freeze for TransactionError","synthetic":true,"types":[]},{"text":"impl&lt;__T0&gt; Freeze for TxnSegmentWriterError&lt;__T0&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;__T0: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TxnStreamWriterError","synthetic":true,"types":[]},{"text":"impl&lt;__T0&gt; Freeze for TxnClosed&lt;__T0&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;__T0: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TxnControllerError","synthetic":true,"types":[]},{"text":"impl&lt;__T0, __T1&gt; Freeze for TxnCommitError&lt;__T0, __T1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;__T0: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;__T1: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;__T0, __T1&gt; Freeze for TxnAbortError&lt;__T0, __T1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;__T0: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;__T1: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SerdeError","synthetic":true,"types":[]},{"text":"impl&lt;__T0&gt; Freeze for Cbor&lt;__T0&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;__T0: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SynchronizerError","synthetic":true,"types":[]},{"text":"impl&lt;__T0&gt; Freeze for SyncTableError&lt;__T0&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;__T0: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;__T0&gt; Freeze for SyncUpdateError&lt;__T0&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;__T0: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;__T0&gt; Freeze for SyncTombstoneError&lt;__T0&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;__T0: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for EventReader","synthetic":true,"types":[]},{"text":"impl Freeze for ReaderState","synthetic":true,"types":[]},{"text":"impl Freeze for EventStreamWriter","synthetic":true,"types":[]},{"text":"impl Freeze for ClientMetrics","synthetic":true,"types":[]},{"text":"impl Freeze for ReaderGroup","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RawClientImpl&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ReaderGroupStateError","synthetic":true,"types":[]},{"text":"impl !Freeze for ReaderGroupState","synthetic":true,"types":[]},{"text":"impl Freeze for Offset","synthetic":true,"types":[]},{"text":"impl Freeze for ReaderGroupConfig","synthetic":true,"types":[]},{"text":"impl Freeze for ReaderGroupConfigBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for SegmentMetadataClientError","synthetic":true,"types":[]},{"text":"impl !Freeze for SegmentMetadataClient","synthetic":true,"types":[]},{"text":"impl Freeze for ReaderError","synthetic":true,"types":[]},{"text":"impl !Freeze for AsyncSegmentReaderImpl","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for SegmentSlice","synthetic":true,"types":[]},{"text":"impl Freeze for SliceMetadata","synthetic":true,"types":[]},{"text":"impl Freeze for SegmentDataBuffer","synthetic":true,"types":[]},{"text":"impl !Freeze for TableSynchronizer","synthetic":true,"types":[]},{"text":"impl Freeze for Key","synthetic":true,"types":[]},{"text":"impl Freeze for Value","synthetic":true,"types":[]},{"text":"impl Freeze for Table","synthetic":true,"types":[]},{"text":"impl !Freeze for TableMap","synthetic":true,"types":[]},{"text":"impl Freeze for TableError","synthetic":true,"types":[]},{"text":"impl Freeze for TransactionalEventStreamWriter","synthetic":true,"types":[]},{"text":"impl Freeze for Transaction","synthetic":true,"types":[]}];
implementors["server_cli"] = [{"text":"impl Freeze for Command","synthetic":true,"types":[]},{"text":"impl Freeze for Opt","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()