initSidebarItems({"fn":[["deserialize_from","Deserialize the Value into the type T by using cbor deserializer. This method would be used by the user after calling get() of table_synchronizer."]],"struct":[["Key","The Key struct in the in memory map. It contains two fields, the key and key_version. The key_version is used for conditional update on server side. If the key_version is i64::MIN, then the update will be unconditional."],["Table","The Table struct contains a nested map and a version map, which are the same as in table synchronizer but will be updated instantly when caller calls Insert or Remove method. It is used to update the server side of table map and its updates will be applied to table synchronizer once the updates are successfully stored on the server side."],["TableSynchronizer","Provides a map that is synchronized across different processes. The pattern is to have a map that can be updated by using Insert or Remove. Each process can perform logic based on its in memory map and apply updates by supplying a function to create Insert/Remove objects. Updates from other processes can be obtained by calling fetchUpdates()."],["Value","The Value struct in the in memory map. It contains two fields. type_id: it is used by caller to figure out the exact type of the data. data: the serialized Value."]],"trait":[["ValueClone","Clone trait helper."],["ValueData","The trait bound for the ValueData"],["ValueSerialize","Serialize trait helper, we need to serialize the ValueData in Insert struct into Vec."]]});